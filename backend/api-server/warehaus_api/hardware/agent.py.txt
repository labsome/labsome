#!/usr/bin/python
#
# chkconfig: 345 90 10
# description: Warehaus agent
#

### BEGIN INIT INFO
# Provides: atd at batch
# Required-Start: $local_fs $network $syslog
# Required-Stop: $local_fs $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Warehaus agent
# Description: Warehaus agent
### END INIT INFO

import os
import sys
import time
import signal
import logging
import logging.handlers
from hashlib import md5
from urllib2 import urlopen

PID_FILE = '/var/run/warehaus-agent.pid'

logger = logging.getLogger(__name__)

#--------------------------------------------------------------------#
# Agent daemon                                                       #
#--------------------------------------------------------------------#

env = dict(
    WAREHAUS_HEARTBEAT_CODE_URL = '$$WAREHAUS_HEARTBEAT_CODE_URL$$',
    WAREHAUS_HEARTBEAT_POST_URL = '$$WAREHAUS_HEARTBEAT_POST_URL$$',
    WAREHAUS_INTERVAL = int('$$WAREHAUS_INTERVAL$$'),
)

def get_heartbeat_code():
    logger.debug('Downloading heartbeat code from {0}'.format(env['WAREHAUS_HEARTBEAT_CODE_URL']))
    heartbeat_code = urlopen(env['WAREHAUS_HEARTBEAT_CODE_URL']).read()
    heartbeat_md5 = md5(heartbeat_code).hexdigest()
    logger.debug('Received heartbeat code with MD5={0}'.format(heartbeat_md5))
    return heartbeat_code

def run_once():
    logger.info('Running once: env={0!r}'.format(env))
    heartbeat_code = get_heartbeat_code()
    logger.info('Starting to run heartbeat code')
    exec heartbeat_code in dict(env)
    logger.info('Finished running heartbeat code')

def agent_main():
    pid_file = open(PID_FILE, 'w')
    pid_file.write(str(os.getpid()))
    pid_file.close()
    while True:
        try:
            run_once()
        except KeyboardInterrupt:
            raise
        except Exception as error:
            logger.exception('Error in main loop')
        else:
            logger.info('Done running, sleeping for {0} seconds'.format(env['WAREHAUS_INTERVAL']))
        time.sleep(max(env['WAREHAUS_INTERVAL'], 1))

#--------------------------------------------------------------------#
# SysV commands                                                      #
#--------------------------------------------------------------------#

def start_logging():
    root = logging.getLogger()
    root.setLevel(logging.DEBUG)
    if os.environ.get('WAREHAUS_AGENT_LOGGING', None) == 'STDOUT':
        ch = logging.StreamHandler(sys.stdout)
    else:
        ch = logging.handlers.SysLogHandler(address='/dev/log')
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('[%(asctime)s] %(levelname)5s: %(message)s')
    ch.setFormatter(formatter)
    root.addHandler(ch)

def usage():
    print >>sys.stderr, 'error: Usage: {0} [start|stop|status|once]'.format(sys.argv[0])
    raise SystemExit(1)

def get_agent_pid():
    try:
        return int(open(PID_FILE).read())
    except (ValueError, IOError) as error:
        logger.debug('Skipping PID file: {0}'.format(error))
        return None

def is_process_running(pid):
    return os.path.exists('/proc/{0}'.format(pid))

def is_agent_running():
    if not os.path.exists(PID_FILE):
        return False
    agent_pid = get_agent_pid()
    if agent_pid is None:
        return False
    return is_process_running(agent_pid)

def start_agent():
    if os.fork() == 0:
        agent_main()

def stop_agent():
    agent_pid = get_agent_pid()
    if agent_pid is None or not is_process_running(agent_pid):
        print >>sys.stderr, 'error: Warehaus agent is NOT running'
    else:
        print >>sys.stderr, 'Stopping Warehaus agent...'
        os.kill(agent_pid, signal.SIGTERM)
        for _ in xrange(5):
            if not is_agent_running():
                return
            time.sleep(0.1)
        print >>sys.stderr, 'error: Timed out waiting for agent to stop'
        raise SystemExit(1)

def main():
    start_logging()
    if (len(sys.argv) != 2):
        usage()
    if sys.argv[1] == 'start':
        if is_agent_running():
            print >>sys.stderr, 'error: Other agent is currently running'
            raise SystemExit(1)
        start_agent()
    elif sys.argv[1] == 'stop':
        stop_agent()
    elif sys.argv[1] == 'status':
        if is_agent_running():
            print >>sys.stderr, 'status: Warehaus agent is RUNNING'
        else:
            print >>sys.stderr, 'status: Warehaus agent is NOT RUNNING'
    elif sys.argv[1] == 'once':
        run_once()
    else:
        usage()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info('Got CTRL+C')
