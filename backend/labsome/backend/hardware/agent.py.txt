#!/usr/bin/python
import sys
import time
import logging
from hashlib import md5
from urllib2 import urlopen
from urlparse import urljoin

logger = logging.getLogger(__name__)

env = dict(
    LABSOME_URL = '$$LABSOME_URL$$',
    LABSOME_INTERVAL = int('$$LABSOME_INTERVAL$$'),
    LABSOME_LAB_ID = '$$LABSOME_LAB_ID$$',
)

def log_to_console():
    root = logging.getLogger()
    root.setLevel(logging.DEBUG)
    ch = logging.StreamHandler(sys.stdout)
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('[%(asctime)s] %(levelname)5s: %(message)s')
    ch.setFormatter(formatter)
    root.addHandler(ch)

def get_heartbeat_code():
    heartbeat_code_url = urljoin(env['LABSOME_URL'], '/api/hardware/v1/builtin-server/code/heartbeat.py')
    logger.debug('Downloading heartbeat code from {}'.format(heartbeat_code_url))
    heartbeat_code = urlopen(heartbeat_code_url).read()
    heartbeat_md5 = md5(heartbeat_code).hexdigest()
    logger.debug('Received heartbeat code with MD5={}'.format(heartbeat_md5))
    return heartbeat_code

def run_once():
    logger.info('Running once: url={!r}'.format(env['LABSOME_URL']))
    heartbeat_code = get_heartbeat_code()
    logger.info('Starting to run heartbeat code')
    exec heartbeat_code in dict(env)
    logger.info('Finished running heartbeat code')

def main():
    log_to_console()
    while True:
        try:
            run_once()
        except KeyboardInterrupt:
            raise
        except Exception as error:
            logger.exception('Error in main loop')
        else:
            logger.info('Done running, sleeping for {} seconds'.format(env['LABSOME_INTERVAL']))
        time.sleep(max(env['LABSOME_INTERVAL'], 1))

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info('Got CTRL+C')
